generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/africanmarket/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  DRIVER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum RideStatus {
  PENDING
  ACCEPTED
  DRIVER_ARRIVING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  phone         String?
  role          UserRole @default(CUSTOMER)
  avatar        String?
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  
  // Enhanced authentication fields
  emailVerified         Boolean   @default(false)
  emailVerifiedAt       DateTime?
  phoneVerified         Boolean   @default(false)
  phoneVerifiedAt       DateTime?
  kycVerified           Boolean   @default(false)
  kycVerifiedAt         DateTime?
  profileCompleted      Boolean   @default(false)
  profileCompletedAt    DateTime?
  
  // Security fields
  failedLoginAttempts   Int       @default(0)
  lockedUntil           DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // Two-factor authentication
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  twoFactorBackupCodes  String[]
  
  // Social login fields
  socialProviders       String[]
  
  // Additional profile fields
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  gender                String?
  address               String?
  city                  String?
  province              String?
  postalCode            String?
  country               String?   @default("Canada")
  timezone              String?   @default("America/St_Johns")
  language              String?   @default("en")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  customerOrders     Order[]              @relation("CustomerOrders")
  vendorProfile      Vendor?
  driverProfile      Driver?
  customerRides      Ride[]               @relation("CustomerRides")
  reviews            Review[]
  payments           Payment[]
  notifications      Notification[]
  chatMessages       ChatMessage[]
  addresses          Address[]
  verificationTokens VerificationToken[]
  documents          Document[]
  kycApplications    KYCApplication[]
  
  // Browse and Discovery relations
  vendorFavorites    VendorFavorite[]
  productFavorites   ProductFavorite[]
  vendorViews        VendorView[]
  productViews       ProductView[]
  searchQueries      SearchQuery[]
  recentlyViewed     RecentlyViewed[]
  preferences        UserPreferences?
  
  // Shopping Cart relations
  cart               Cart?
  promoCodeUsages    PromoCodeUsage[]
  savedAddresses     SavedAddress[]
  
  // Order Tracking relations
  deliveryConfirmations DeliveryConfirmation[] @relation("DeliveryConfirmations")
  notificationPreferences NotificationPreferences?
  orderChatSender    OrderChat[] @relation("OrderChatSender")
  pushNotifications  PushNotification[] @relation("PushNotifications")
  
  // Rideshare relations
  rideRequests       RideRequest[]
  savedLocations     SavedLocation[]
  rideSchedules      RideSchedule[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Vendor {
  id                    String             @id @default(cuid())
  userId                String             @unique
  businessName          String
  businessType          String
  description           String?
  logo                  String?
  coverImage            String?
  address               String
  city                  String
  province              String             @default("Newfoundland and Labrador")
  postalCode            String
  latitude              Float?
  longitude             Float?
  phone                 String
  businessHours         Json?
  verificationStatus    VerificationStatus @default(PENDING)
  verificationDocuments Json?
  foodSafetyCertificate String?
  businessLicense       String?
  isActive              Boolean            @default(true)
  commissionRate        Float              @default(0.20)
  rating                Float              @default(0)
  totalReviews          Int                @default(0)
  
  // Enhanced business information
  businessEmail         String?
  businessWebsite       String?
  businessRegistrationNumber String?
  taxNumber             String?
  businessCategory      String?
  businessSubcategory   String?
  cuisineTypes          String[]           // For food vendors
  servingRadius         Float?             // in kilometers
  minimumOrderAmount    Float?
  deliveryFee           Float?
  deliveryTime          String?            // e.g., "30-45 minutes"
  
  // Discovery and popularity features
  isFeatured            Boolean            @default(false)
  featuredUntil         DateTime?
  popularityScore       Float              @default(0)
  viewCount             Int                @default(0)
  orderCount            Int                @default(0)
  lastOrderAt           DateTime?
  averageOrderValue     Float              @default(0)
  
  // Search and filtering
  searchKeywords        String[]           // For search optimization
  tags                  String[]           // Custom tags
  dietaryOptions        String[]           // vegetarian, vegan, halal, etc.
  priceRange            String?            // "$", "$$", "$$$", "$$$$"
  isCurrentlyOpen       Boolean            @default(true)
  
  // Social media
  facebookUrl           String?
  instagramUrl          String?
  twitterUrl            String?
  
  // Business verification
  businessVerified      Boolean            @default(false)
  businessVerifiedAt    DateTime?
  foodSafetyVerified    Boolean            @default(false)
  foodSafetyVerifiedAt  DateTime?
  taxVerified           Boolean            @default(false)
  taxVerifiedAt         DateTime?
  
  // Operational settings
  acceptsPreorders      Boolean            @default(false)
  acceptsCashOnDelivery Boolean            @default(true)
  acceptsCardPayment    Boolean            @default(true)
  acceptsDigitalPayment Boolean            @default(true)
  
  // Profile completion
  profileCompletionScore Int               @default(0) // 0-100
  onboardingCompleted   Boolean            @default(false)
  onboardingCompletedAt DateTime?
  
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  orders       Order[]
  reviews      Review[]
  earnings     Earning[]
  categories   ProductCategory[]
  analytics    VendorAnalytics[]
  hours        VendorHours[]
  notifications VendorNotification[]
  settings     VendorSettings?
  favorites    VendorFavorite[]
  views        VendorView[]
  
  // Shopping Cart relations
  cartItems      CartItem[]
  promoCodes     PromoCode[]
  vendorOrders   VendorOrder[]
  deliveryZones  DeliveryZone[]
  
  // Order Tracking relations
  preparationTimes PreparationTime[]
  geofences       Geofence[]
  
  @@index([isActive, verificationStatus])
  @@index([isFeatured, popularityScore])
  @@index([businessName, businessType])
  @@index([cuisineTypes])
  @@index([city, province])
  @@index([rating, totalReviews])
  @@index([isCurrentlyOpen])
}

model Product {
  id          String   @id @default(cuid())
  vendorId    String
  categoryId  String?
  name        String
  description String?
  price       Float
  category    String   // Keep for backward compatibility
  image       String?
  images      String[]
  isAvailable Boolean  @default(true)
  ingredients String?
  allergens   String?
  isSpicy     Boolean  @default(false)
  prepTime    Int?     // in minutes
  
  // Enhanced product features
  sku         String?  // Stock keeping unit
  stockQuantity Int?   // Current stock level
  lowStockAlert Int?   // Alert threshold
  isTrackingStock Boolean @default(false)
  weight      Float?   // in grams
  dimensions  String?  // "length x width x height"
  nutritionInfo Json?  // Nutrition facts
  dietaryInfo String[] // vegetarian, vegan, gluten-free, etc.
  spiceLevel  Int?     // 1-5 scale
  isSignatureDish Boolean @default(false)
  isPopular   Boolean  @default(false)
  displayOrder Int?    // For menu ordering
  
  // Discovery and popularity features
  viewCount   Int      @default(0)
  orderCount  Int      @default(0)
  popularityScore Float @default(0)
  lastOrderAt DateTime?
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  
  // Search and filtering
  searchKeywords String[] // For search optimization
  
  // Pricing and promotions
  originalPrice Float?  // For discounts
  discountPercent Float? // Discount percentage
  promotionStart DateTime?
  promotionEnd   DateTime?
  
  // SEO and metadata
  slug        String?
  tags        String[]
  metaTitle   String?
  metaDescription String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor     Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  productCategory ProductCategory? @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  inventoryLogs InventoryLog[]
  favorites  ProductFavorite[]
  views      ProductView[]
  
  // Shopping Cart relations
  cartItems       CartItem[]
  vendorOrderItems VendorOrderItem[]
  
  @@index([vendorId])
  @@index([categoryId])
  @@index([isAvailable])
  @@index([name, description])
  @@index([category])
  @@index([tags])
  @@index([isPopular, popularityScore])
  @@index([rating, totalReviews])
  @@index([price])
}

model Driver {
  id                    String             @id @default(cuid())
  userId                String             @unique
  licenseNumber         String
  vehicleType           String
  vehicleMake           String
  vehicleModel          String
  vehicleYear           Int
  vehicleColor          String
  vehiclePlate          String
  vehicleImage          String?
  licenseImage          String?
  insuranceImage        String?
  verificationStatus    VerificationStatus @default(PENDING)
  isAvailable           Boolean            @default(false)
  currentLatitude       Float?
  currentLongitude      Float?
  commissionRate        Float              @default(0.25)
  rating                Float              @default(0)
  totalReviews          Int                @default(0)
  totalDeliveries       Int                @default(0)
  totalRides            Int                @default(0)
  
  // Enhanced driver information
  licenseExpiry         DateTime?
  licenseClass          String?            // Class of license
  licenseIssuedBy       String?            // Province/Authority
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelation String?
  
  // Vehicle details
  vehicleVin            String?
  vehicleRegistrationExpiry DateTime?
  vehicleInspectionExpiry DateTime?
  vehicleInsuranceExpiry DateTime?
  vehicleInsuranceProvider String?
  vehicleInsurancePolicyNumber String?
  
  // Service preferences
  serviceTypes          String[]           // DELIVERY, RIDESHARE, BOTH
  serviceRadius         Float?             // in kilometers
  workingHours          Json?              // Similar to business hours
  preferredAreas        String[]           // Preferred service areas
  
  // Background check
  backgroundCheckStatus VerificationStatus @default(PENDING)
  backgroundCheckDate   DateTime?
  criminalRecordCheck   Boolean            @default(false)
  drivingRecordCheck    Boolean            @default(false)
  
  // Driver verification
  licenseVerified       Boolean            @default(false)
  licenseVerifiedAt     DateTime?
  vehicleVerified       Boolean            @default(false)
  vehicleVerifiedAt     DateTime?
  insuranceVerified     Boolean            @default(false)
  insuranceVerifiedAt   DateTime?
  backgroundVerified    Boolean            @default(false)
  backgroundVerifiedAt  DateTime?
  
  // Operational settings
  acceptsCashPayment    Boolean            @default(true)
  acceptsCardPayment    Boolean            @default(true)
  acceptsDigitalPayment Boolean            @default(true)
  canDeliverFood        Boolean            @default(true)
  canTransportPassengers Boolean           @default(true)
  hasInsulatedBag       Boolean            @default(false)
  hasGpsDevice          Boolean            @default(false)
  
  // Profile completion
  profileCompletionScore Int               @default(0) // 0-100
  onboardingCompleted   Boolean            @default(false)
  onboardingCompletedAt DateTime?
  
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryOrders    Order[]
  rides             Ride[]
  reviews           Review[]
  earnings          Earning[]
  
  // Order Tracking relations
  locations         DriverLocation[]
  shifts            DriverShift[]
  assignments       DriverAssignment[]
  routes            DeliveryRoute[]
  deliveryConfirmations DeliveryConfirmation[]
  
  // Rideshare relations
  driverResponses   DriverResponse[]
  driverPreferences DriverPreference?
}

model Order {
  id                String      @id @default(cuid())
  customerId        String
  vendorId          String
  driverId          String?
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  items             OrderItem[]
  subtotal          Float
  deliveryFee       Float
  tax               Float
  totalAmount       Float
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  specialInstructions String?
  isDelivery        Boolean     @default(true)
  deliveryAddress   String?
  deliveryLatitude  Float?
  deliveryLongitude Float?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  customer      User        @relation("CustomerOrders", fields: [customerId], references: [id])
  vendor        Vendor      @relation(fields: [vendorId], references: [id])
  driver        Driver?     @relation(fields: [driverId], references: [id])
  payment       Payment?
  review        Review?
  tracking      OrderTracking[]
  notifications Notification[]
  
  // Shopping Cart relations
  promoCodeUsages PromoCodeUsage[]
  vendorOrders    VendorOrder[]
  taxCalculation  TaxCalculation?
  
  // Order Tracking relations
  preparationTime PreparationTime[]
  deliveryConfirmation DeliveryConfirmation?
  orderChat       OrderChat[]
  pushNotifications PushNotification[]
  timeEstimate    OrderTimeEstimate?
  assignments     DriverAssignment[]
  geofences       Geofence[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  subtotal  Float
  notes     String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Ride {
  id                  String     @id @default(cuid())
  customerId          String
  driverId            String?
  rideNumber          String     @unique
  status              RideStatus @default(PENDING)
  rideType            String     @default("STANDARD") // STANDARD, PREMIUM, SHARED
  pickupAddress       String
  pickupLatitude      Float
  pickupLongitude     Float
  destinationAddress  String
  destinationLatitude Float
  destinationLongitude Float
  distance            Float?     // in km
  estimatedDuration   Int?       // in minutes
  estimatedFare       Float?
  actualFare          Float?
  baseFare            Float?
  distanceFare        Float?
  timeFare            Float?
  surgeFare           Float?
  surgeMultiplier     Float?     @default(1.0)
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       String?
  notes               String?
  passengers          Int        @default(1)
  isScheduled         Boolean    @default(false)
  scheduledFor        DateTime?
  cancelReason        String?
  cancelledBy         String?    // USER or DRIVER
  requestedAt         DateTime   @default(now())
  acceptedAt          DateTime?
  arrivedAt           DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  customer      User         @relation("CustomerRides", fields: [customerId], references: [id])
  driver        Driver?      @relation(fields: [driverId], references: [id])
  payment       Payment?
  review        Review?
  tracking      RideTracking[]
  notifications Notification[]
  
  // New rideshare relations
  rideRequest   RideRequest?
  savedLocation SavedLocation[]
  fareEstimate  FareEstimate?
  
  // Order Tracking relations
  pushNotifications PushNotification[]
  
  @@index([customerId, createdAt])
  @@index([driverId, createdAt])
  @@index([status, createdAt])
  @@index([isScheduled, scheduledFor])
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  orderId           String?       @unique
  rideId            String?       @unique
  amount            Float
  currency          String        @default("CAD")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String
  stripePaymentId   String?
  paypalPaymentId   String?
  platformFee       Float
  vendorAmount      Float?
  driverAmount      Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])
  ride  Ride?  @relation(fields: [rideId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  vendorId   String?
  productId  String?
  driverId   String?
  orderId    String?  @unique
  rideId     String?  @unique
  rating     Int      // 1-5
  comment    String?
  images     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  vendor   Vendor?  @relation(fields: [vendorId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])
  driver   Driver?  @relation(fields: [driverId], references: [id])
  order    Order?   @relation(fields: [orderId], references: [id])
  ride     Ride?    @relation(fields: [rideId], references: [id])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  type        String   // home, work, other
  address     String
  city        String
  province    String
  postalCode  String
  latitude    Float?
  longitude   Float?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderTracking {
  id        String   @id @default(cuid())
  orderId   String
  status    OrderStatus
  message   String?
  latitude  Float?
  longitude Float?
  timestamp DateTime @default(now())
  updatedBy String?  // user who updated the status
  estimatedTime DateTime?  // estimated time for this status
  actualTime DateTime?     // actual time this status was reached
  metadata  Json?          // additional tracking data

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId, timestamp])
}

model RideTracking {
  id        String   @id @default(cuid())
  rideId    String
  status    RideStatus
  message   String?
  latitude  Float?
  longitude Float?
  timestamp DateTime @default(now())

  // Relations
  ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)
}

// Real-time driver location tracking
model DriverLocation {
  id        String   @id @default(cuid())
  driverId  String
  latitude  Float
  longitude Float
  heading   Float?   // Direction in degrees (0-360)
  speed     Float?   // Speed in km/h
  accuracy  Float?   // GPS accuracy in meters
  timestamp DateTime @default(now())
  isOnline  Boolean  @default(true)
  isDelivering Boolean @default(false)
  currentOrderId String?
  batteryLevel Int?   // Battery percentage
  appVersion String?

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@index([driverId, timestamp])
  @@index([latitude, longitude])
}

// Dynamic preparation time management
model PreparationTime {
  id        String   @id @default(cuid())
  vendorId  String
  orderId   String?
  baseTime  Int      // Base preparation time in minutes
  complexity Int     // Order complexity factor (1-5)
  rush      Boolean  @default(false) // Rush hour multiplier
  estimatedTime Int  // Final estimated time in minutes
  actualTime Int?    // Actual preparation time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  order  Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([vendorId])
  @@index([orderId])
}

// Delivery confirmation with photos
model DeliveryConfirmation {
  id        String   @id @default(cuid())
  orderId   String   @unique
  driverId  String
  customerId String
  latitude  Float
  longitude Float
  photos    String[] // Array of photo URLs
  signature String?  // Digital signature or PIN
  notes     String?
  timestamp DateTime @default(now())
  verified  Boolean  @default(false)
  verifiedAt DateTime?

  // Relations
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver   Driver @relation(fields: [driverId], references: [id])
  customer User   @relation("DeliveryConfirmations", fields: [customerId], references: [id])
  
  @@index([orderId])
  @@index([driverId])
}

// Enhanced notification preferences
model NotificationPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  orderUpdates Boolean @default(true)
  preparationTime Boolean @default(true)
  driverAssigned Boolean @default(true)
  driverLocation Boolean @default(true)
  deliveryConfirmation Boolean @default(true)
  promotions Boolean @default(true)
  email     Boolean @default(true)
  sms       Boolean @default(false)
  push      Boolean @default(true)
  
  // Notification frequency
  realTimeUpdates Boolean @default(true)
  digest     Boolean @default(false)
  digestFrequency String? // daily, weekly
  
  // Quiet hours
  quietHours Boolean @default(false)
  quietStart String? // Time in HH:MM format
  quietEnd   String? // Time in HH:MM format
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Order chat for communication
model OrderChat {
  id        String   @id @default(cuid())
  orderId   String
  senderId  String
  senderRole UserRole
  message   String
  messageType String @default("text") // text, image, location, system
  metadata  Json?    // Additional message data
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  order  Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sender User  @relation("OrderChatSender", fields: [senderId], references: [id])
  
  @@index([orderId, createdAt])
  @@index([senderId])
}

// Push notification management
model PushNotification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  data      Json?    // Additional notification data
  sent      Boolean  @default(false)
  sentAt    DateTime?
  delivered Boolean  @default(false)
  deliveredAt DateTime?
  clicked   Boolean  @default(false)
  clickedAt DateTime?
  orderId   String?
  rideId    String?
  createdAt DateTime @default(now())

  // Relations
  user  User   @relation("PushNotifications", fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])
  ride  Ride?  @relation(fields: [rideId], references: [id])
  
  @@index([userId, sent])
  @@index([orderId])
}

// Driver shift management
model DriverShift {
  id        String   @id @default(cuid())
  driverId  String
  startTime DateTime
  endTime   DateTime?
  status    String   @default("ACTIVE") // ACTIVE, PAUSED, ENDED
  totalEarnings Float @default(0)
  totalDeliveries Int @default(0)
  totalDistance Float @default(0) // in km
  totalTime Int     @default(0)   // in minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@index([driverId, startTime])
}

// Comprehensive time estimates
model OrderTimeEstimate {
  id        String   @id @default(cuid())
  orderId   String   @unique
  preparationTime Int    // in minutes
  pickupTime Int         // in minutes  
  deliveryTime Int       // in minutes
  totalTime Int          // in minutes
  estimatedPickup DateTime?
  estimatedDelivery DateTime?
  actualPickup DateTime?
  actualDelivery DateTime?
  accuracy Float?        // Accuracy percentage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// Driver assignment queue
model DriverAssignment {
  id        String   @id @default(cuid())
  orderId   String
  driverId  String
  priority  Int      @default(0) // Higher number = higher priority
  distance  Float    // Distance from driver to pickup in km
  eta       Int      // ETA in minutes
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED, EXPIRED
  assignedAt DateTime @default(now())
  respondedAt DateTime?
  response  String?  // Driver's response message
  expiresAt DateTime

  // Relations
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [id])
  
  @@index([orderId, priority])
  @@index([driverId, status])
  @@index([expiresAt])
}

// Geofencing for pickup and delivery
model Geofence {
  id        String   @id @default(cuid())
  name      String
  type      String   // pickup, delivery, vendor_area
  latitude  Float
  longitude Float
  radius    Float    // Radius in meters
  vendorId  String?
  orderId   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  vendor Vendor? @relation(fields: [vendorId], references: [id])
  order  Order?  @relation(fields: [orderId], references: [id])
  
  @@index([latitude, longitude])
  @@index([vendorId])
}

// Route optimization
model DeliveryRoute {
  id        String   @id @default(cuid())
  driverId  String
  orderIds  String[] // Array of order IDs in route
  route     Json     // Route data from Google Maps
  distance  Float    // Total distance in km
  duration  Int      // Total duration in minutes
  optimized Boolean  @default(false)
  status    String   @default("PLANNED") // PLANNED, ACTIVE, COMPLETED
  startedAt DateTime?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  driver Driver @relation(fields: [driverId], references: [id])
  
  @@index([driverId, status])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  orderId   String?
  rideId    String?
  type      String   // order_update, ride_update, payment, promotion
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])
  ride  Ride?  @relation(fields: [rideId], references: [id])
}

model ChatMessage {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  orderId    String?
  rideId     String?
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  sender User @relation(fields: [senderId], references: [id])
}

model Earning {
  id          String   @id @default(cuid())
  vendorId    String?
  driverId    String?
  orderId     String?
  rideId      String?
  amount      Float
  commission  Float
  netAmount   Float
  type        String   // delivery, ride, bonus
  description String?
  createdAt   DateTime @default(now())

  // Relations
  vendor Vendor? @relation(fields: [vendorId], references: [id])
  driver Driver? @relation(fields: [driverId], references: [id])
}

model SystemConfig {
  id                  String   @id @default(cuid())
  key                 String   @unique
  value               String
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// New models for enhanced authentication

enum TokenType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_SETUP
  ACCOUNT_ACTIVATION
}

enum DocumentType {
  PROFILE_PHOTO
  GOVERNMENT_ID
  DRIVERS_LICENSE
  VEHICLE_REGISTRATION
  VEHICLE_INSURANCE
  BUSINESS_LICENSE
  FOOD_SAFETY_CERTIFICATE
  BUSINESS_REGISTRATION
  TAX_CERTIFICATE
  BANK_STATEMENT
  PROOF_OF_ADDRESS
  OTHER
}

enum DocumentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum KYCStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  RESUBMISSION_REQUIRED
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String
  type      TokenType
  token     String    @unique
  code      String?   // For SMS/Email verification codes
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  attempts  Int       @default(0)
  maxAttempts Int     @default(3)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId, type])
}

model Document {
  id           String         @id @default(cuid())
  userId       String
  type         DocumentType
  title        String
  description  String?
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  cloudinaryId String?
  status       DocumentStatus @default(PENDING)
  uploadedAt   DateTime       @default(now())
  reviewedAt   DateTime?
  reviewedBy   String?
  rejectionReason String?
  expiresAt    DateTime?
  metadata     Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  kycApplications KYCApplication[] @relation("KYCDocuments")

  @@index([userId, type])
  @@index([status])
}

model KYCApplication {
  id                String        @id @default(cuid())
  userId            String
  status            KYCStatus     @default(NOT_STARTED)
  applicationLevel  String        @default("BASIC") // BASIC, STANDARD, PREMIUM
  submittedAt       DateTime?
  reviewedAt        DateTime?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  expiresAt         DateTime?
  reviewedBy        String?
  rejectionReason   String?
  notes             String?
  completionScore   Int           @default(0) // 0-100
  
  // Required documents checklist
  profilePhotoRequired      Boolean @default(true)
  governmentIdRequired      Boolean @default(true)
  proofOfAddressRequired    Boolean @default(true)
  businessLicenseRequired   Boolean @default(false)
  foodSafetyRequired        Boolean @default(false)
  driversLicenseRequired    Boolean @default(false)
  vehicleRegistrationRequired Boolean @default(false)
  vehicleInsuranceRequired  Boolean @default(false)
  
  // Document verification status
  profilePhotoVerified      Boolean @default(false)
  governmentIdVerified      Boolean @default(false)
  proofOfAddressVerified    Boolean @default(false)
  businessLicenseVerified   Boolean @default(false)
  foodSafetyVerified        Boolean @default(false)
  driversLicenseVerified    Boolean @default(false)
  vehicleRegistrationVerified Boolean @default(false)
  vehicleInsuranceVerified  Boolean @default(false)
  
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[] @relation("KYCDocuments")

  @@index([userId])
  @@index([status])
}

model LoginAttempt {
  id          String   @id @default(cuid())
  email       String
  ipAddress   String
  userAgent   String?
  successful  Boolean
  failureReason String?
  timestamp   DateTime @default(now())
  country     String?
  city        String?
  device      String?
  
  @@index([email])
  @@index([ipAddress])
  @@index([timestamp])
}

model PasswordResetLog {
  id          String   @id @default(cuid())
  userId      String
  email       String
  ipAddress   String
  userAgent   String?
  tokenUsed   String
  successful  Boolean
  timestamp   DateTime @default(now())
  
  @@index([userId])
  @@index([email])
  @@index([timestamp])
}

// Enhanced Vendor Management Models

model ProductCategory {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  displayOrder Int?    // For menu ordering
  parentId    String?  // For subcategories
  
  // SEO and metadata
  slug        String?
  metaTitle   String?
  metaDescription String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor      Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  products    Product[]
  parent      ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  
  @@index([vendorId])
  @@index([isActive])
}

model InventoryLog {
  id        String   @id @default(cuid())
  productId String
  vendorId  String
  type      String   // STOCK_IN, STOCK_OUT, ADJUSTMENT, AUTO_DEDUCTION
  quantity  Int      // Can be negative for stock out
  previousStock Int
  currentStock  Int
  reason    String?  // reason for adjustment
  notes     String?
  orderId   String?  // If related to an order
  userId    String?  // Who made the change
  
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([vendorId])
  @@index([createdAt])
}

model VendorAnalytics {
  id        String   @id @default(cuid())
  vendorId  String
  date      DateTime // Date for the analytics record
  
  // Order metrics
  totalOrders       Int     @default(0)
  completedOrders   Int     @default(0)
  cancelledOrders   Int     @default(0)
  avgOrderValue     Float   @default(0)
  
  // Revenue metrics
  totalRevenue      Float   @default(0)
  netRevenue        Float   @default(0) // After commissions
  totalCommission   Float   @default(0)
  
  // Product metrics
  totalProducts     Int     @default(0)
  activeProducts    Int     @default(0)
  outOfStockProducts Int    @default(0)
  
  // Customer metrics
  totalCustomers    Int     @default(0)
  newCustomers      Int     @default(0)
  returningCustomers Int    @default(0)
  
  // Performance metrics
  avgPreparationTime Float  @default(0) // in minutes
  avgRating         Float   @default(0)
  totalReviews      Int     @default(0)
  
  // Additional metrics
  totalItemsSold    Int     @default(0)
  refundAmount      Float   @default(0)
  totalTips         Float   @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  @@unique([vendorId, date])
  @@index([vendorId])
  @@index([date])
}

model VendorHours {
  id        String   @id @default(cuid())
  vendorId  String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  isOpen    Boolean  @default(true)
  openTime  String   // Format: "HH:MM"
  closeTime String   // Format: "HH:MM"
  
  // Special hours
  isHoliday Boolean  @default(false)
  holidayName String?
  specialDate DateTime? // For one-time special hours
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  @@index([vendorId])
  @@index([dayOfWeek])
}

model VendorNotification {
  id        String   @id @default(cuid())
  vendorId  String
  type      String   // ORDER_RECEIVED, LOW_STOCK, PAYMENT_RECEIVED, etc.
  title     String
  message   String
  data      Json?    // Additional notification data
  isRead    Boolean  @default(false)
  priority  String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  @@index([vendorId])
  @@index([isRead])
  @@index([createdAt])
}

model VendorSettings {
  id        String   @id @default(cuid())
  vendorId  String   @unique
  
  // Operational settings
  autoAcceptOrders  Boolean @default(false)
  maxOrdersPerHour  Int?
  minOrderAmount    Float?
  maxOrderAmount    Float?
  
  // Notification settings
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)
  pushNotifications  Boolean @default(true)
  
  // Order settings
  defaultPreparationTime Int @default(30) // in minutes
  allowPreorders         Boolean @default(false)
  preorderDays          Int @default(7)
  
  // Inventory settings
  autoDisableOutOfStock Boolean @default(true)
  lowStockThreshold     Int @default(10)
  sendLowStockAlerts    Boolean @default(true)
  
  // Advanced settings
  customOrderFields     Json?
  integrationSettings   Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // LOGIN, LOGOUT, PROFILE_UPDATE, DOCUMENT_UPLOAD, etc.
  resource    String?  // The resource being acted upon
  resourceId  String?  // ID of the resource
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

// Browse and Discovery Models

model VendorFavorite {
  id        String   @id @default(cuid())
  userId    String
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([userId, vendorId])
  @@index([userId])
  @@index([vendorId])
}

model ProductFavorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model VendorView {
  id        String   @id @default(cuid())
  userId    String?  // Null for anonymous views
  vendorId  String
  ipAddress String?
  userAgent String?
  referrer  String?
  sessionId String?
  timestamp DateTime @default(now())

  // Relations
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vendorId])
  @@index([timestamp])
  @@index([sessionId])
}

model ProductView {
  id        String   @id @default(cuid())
  userId    String?  // Null for anonymous views
  productId String
  ipAddress String?
  userAgent String?
  referrer  String?
  sessionId String?
  timestamp DateTime @default(now())

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([timestamp])
  @@index([sessionId])
}

model SearchQuery {
  id         String   @id @default(cuid())
  userId     String?  // Null for anonymous searches
  query      String
  filters    Json?    // Applied filters
  resultsCount Int    @default(0)
  clickedResults Json? // Which results were clicked
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  timestamp  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([query])
  @@index([timestamp])
  @@index([sessionId])
}

model RecentlyViewed {
  id        String   @id @default(cuid())
  userId    String
  itemType  String   // VENDOR, PRODUCT
  itemId    String
  viewedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemType, itemId])
  @@index([userId])
  @@index([viewedAt])
}

model FeaturedContent {
  id          String   @id @default(cuid())
  type        String   // VENDOR, PRODUCT, BANNER, PROMOTION
  itemId      String?  // ID of the featured item
  title       String
  description String?
  imageUrl    String?
  link        String?
  priority    Int      @default(0)
  isActive    Boolean  @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime?
  clicks      Int      @default(0)
  views       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type, isActive])
  @@index([priority])
  @@index([startDate, endDate])
}

model UserPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  favoriteCategories String[]
  favoriteCuisines String[]
  dietaryRestrictions String[]
  priceRange       String?  // "$", "$$", "$$$", "$$$$"
  maxDeliveryTime  Int?     // in minutes
  deliveryRadius   Float?   // in kilometers
  defaultAddress   String?
  notificationPreferences Json?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Shopping Cart Models

model Cart {
  id                String    @id @default(cuid())
  userId            String    @unique
  items             CartItem[]
  subtotal          Float     @default(0)
  tax               Float     @default(0)
  deliveryFee       Float     @default(0)
  total             Float     @default(0)
  appliedPromoCode  String?
  discountAmount    Float     @default(0)
  isDelivery        Boolean   @default(true)
  deliveryAddress   String?
  deliveryLatitude  Float?
  deliveryLongitude Float?
  specialInstructions String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  appliedPromo PromoCode? @relation(fields: [appliedPromoCode], references: [code])

  @@index([userId])
  @@index([updatedAt])
}

model CartItem {
  id              String    @id @default(cuid())
  cartId          String
  productId       String
  vendorId        String
  quantity        Int       @default(1)
  price           Float     // Price at the time of adding to cart
  subtotal        Float     // quantity * price
  notes           String?   // Special instructions for this item
  addedAt         DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  vendor  Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
  @@index([vendorId])
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_DELIVERY
  FIRST_ORDER
  VENDOR_SPECIFIC
}

model PromoCode {
  id                    String        @id @default(cuid())
  code                  String        @unique
  type                  PromoCodeType
  discountValue         Float         // percentage (0-100) or fixed amount
  minimumOrderAmount    Float?        // minimum order required
  maxDiscountAmount     Float?        // maximum discount for percentage codes
  vendorId              String?       // for vendor-specific codes
  description           String?
  isActive              Boolean       @default(true)
  usageLimit            Int?          // maximum number of uses
  usageCount            Int           @default(0)
  userLimit             Int?          // maximum uses per user
  validFrom             DateTime      @default(now())
  validUntil            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  vendor    Vendor?         @relation(fields: [vendorId], references: [id])
  usages    PromoCodeUsage[]
  carts     Cart[]

  @@index([code])
  @@index([isActive, validFrom, validUntil])
  @@index([vendorId])
}

model PromoCodeUsage {
  id           String    @id @default(cuid())
  userId       String
  promoCodeId  String
  orderId      String?
  discountAmount Float
  usedAt       DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  order     Order?    @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([promoCodeId])
  @@index([orderId])
}

model SavedAddress {
  id             String    @id @default(cuid())
  userId         String
  label          String    // "Home", "Work", "Other"
  firstName      String?
  lastName       String?
  company        String?
  address        String
  apartment      String?
  city           String
  province       String
  postalCode     String
  country        String    @default("Canada")
  phone          String?
  latitude       Float?
  longitude      Float?
  isDefault      Boolean   @default(false)
  deliveryInstructions String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
}

model VendorOrder {
  id                String      @id @default(cuid())
  orderId           String
  vendorId          String
  orderNumber       String      // Unique per vendor
  status            OrderStatus @default(PENDING)
  items             VendorOrderItem[]
  subtotal          Float
  tax               Float
  deliveryFee       Float
  total             Float
  discountAmount    Float       @default(0)
  specialInstructions String?
  estimatedPickupTime DateTime?
  estimatedDeliveryTime DateTime?
  actualPickupTime  DateTime?
  actualDeliveryTime DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@index([orderId])
  @@index([vendorId])
  @@index([status])
}

model VendorOrderItem {
  id              String    @id @default(cuid())
  vendorOrderId   String
  productId       String
  quantity        Int
  price           Float
  subtotal        Float
  notes           String?

  vendorOrder VendorOrder @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@index([vendorOrderId])
  @@index([productId])
}

model TaxCalculation {
  id            String    @id @default(cuid())
  orderId       String?   @unique
  province      String
  city          String?
  postalCode    String?
  subtotal      Float
  hst           Float     @default(0)  // Harmonized Sales Tax
  gst           Float     @default(0)  // Goods and Services Tax
  pst           Float     @default(0)  // Provincial Sales Tax
  totalTax      Float
  taxRate       Float     // Combined tax rate
  createdAt     DateTime  @default(now())

  order Order? @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([province])
}

model DeliveryZone {
  id              String    @id @default(cuid())
  vendorId        String
  name            String    // "Downtown", "Airport Heights", etc.
  description     String?
  boundaries      Json      // GeoJSON polygon
  baseFee         Float     // Base delivery fee for this zone
  feePerKm        Float?    // Additional fee per km
  minimumOrder    Float?    // Minimum order for delivery
  maxDistance     Float?    // Maximum distance in km
  estimatedTime   String?   // "30-45 minutes"
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([isActive])
}

// New Rideshare Models

model RideRequest {
  id                  String   @id @default(cuid())
  rideId              String   @unique
  customerId          String
  pickupAddress       String
  pickupLatitude      Float
  pickupLongitude     Float
  destinationAddress  String
  destinationLatitude Float
  destinationLongitude Float
  rideType            String   @default("STANDARD")
  passengers          Int      @default(1)
  isScheduled         Boolean  @default(false)
  scheduledFor        DateTime?
  notes               String?
  maxFare             Float?
  preferredDriverId   String?
  autoAccept          Boolean  @default(false)
  expiresAt           DateTime
  
  // Driver matching preferences
  minRating           Float?
  allowShared         Boolean  @default(false)
  requireChild        Boolean  @default(false)
  requireWheelchair   Boolean  @default(false)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  ride                Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  customer            User     @relation(fields: [customerId], references: [id])
  driverResponses     DriverResponse[]
  
  @@index([customerId, createdAt])
  @@index([pickupLatitude, pickupLongitude])
  @@index([expiresAt])
}

model SavedLocation {
  id          String   @id @default(cuid())
  userId      String
  rideId      String?
  type        String   // HOME, WORK, FAVORITE, RECENT
  name        String
  address     String
  latitude    Float
  longitude   Float
  apartment   String?
  notes       String?
  isDefault   Boolean  @default(false)
  usageCount  Int      @default(0)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  ride Ride? @relation(fields: [rideId], references: [id])
  
  @@index([userId, type])
  @@index([latitude, longitude])
  @@index([lastUsed])
}

model FareEstimate {
  id              String   @id @default(cuid())
  rideId          String   @unique
  rideType        String
  distance        Float
  duration        Int
  baseFare        Float
  distanceFare    Float
  timeFare        Float
  surgeFare       Float?
  surgeMultiplier Float    @default(1.0)
  totalFare       Float
  currency        String   @default("CAD")
  
  // Fare breakdown
  fareBreakdown   Json     // Detailed fare calculation
  peakHours       Boolean  @default(false)
  weatherImpact   Boolean  @default(false)
  demandLevel     String   @default("NORMAL") // LOW, NORMAL, HIGH, SURGE
  
  validUntil      DateTime
  createdAt       DateTime @default(now())

  // Relations
  ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  @@index([rideType, createdAt])
}

model RideType {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String
  description     String?
  icon            String?
  baseFare        Float
  perKmRate       Float
  perMinuteRate   Float
  minimumFare     Float
  maximumFare     Float?
  capacity        Int      @default(4)
  isActive        Boolean  @default(true)
  
  // Vehicle requirements
  vehicleTypes    String[] // SEDAN, SUV, MINIVAN, LUXURY
  minYear         Int?
  features        String[] // AIR_CONDITIONING, CHILD_SEAT, WHEELCHAIR_ACCESSIBLE
  
  // Surge pricing
  surgePricing    Boolean  @default(false)
  maxSurge        Float    @default(3.0)
  
  // Availability
  availableHours  Json?    // Operating hours
  availableDays   String[] // Days of week
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([name, isActive])
}

model DriverResponse {
  id              String   @id @default(cuid())
  rideRequestId   String
  driverId        String
  response        String   // ACCEPTED, DECLINED, EXPIRED
  estimatedArrival Int?    // in minutes
  notes           String?
  respondedAt     DateTime @default(now())
  expiresAt       DateTime
  
  // Driver location at time of response
  driverLatitude  Float?
  driverLongitude Float?
  distanceToPickup Float?
  
  createdAt       DateTime @default(now())

  // Relations
  rideRequest RideRequest @relation(fields: [rideRequestId], references: [id], onDelete: Cascade)
  driver      Driver      @relation(fields: [driverId], references: [id])
  
  @@index([rideRequestId, response])
  @@index([driverId, respondedAt])
}

model SurgeZone {
  id          String   @id @default(cuid())
  name        String
  boundaries  Json     // GeoJSON polygon
  multiplier  Float    @default(1.0)
  isActive    Boolean  @default(false)
  startTime   DateTime
  endTime     DateTime?
  reason      String?  // HIGH_DEMAND, WEATHER, EVENT
  
  // Metrics
  activeRides Int      @default(0)
  activeDrivers Int    @default(0)
  demandLevel String   @default("NORMAL")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive, startTime])
}

model RideSchedule {
  id              String   @id @default(cuid())
  customerId      String
  rideType        String
  pickupAddress   String
  pickupLatitude  Float
  pickupLongitude Float
  destinationAddress String
  destinationLatitude Float
  destinationLongitude Float
  
  // Scheduling details
  scheduledFor    DateTime
  isRecurring     Boolean  @default(false)
  recurringType   String?  // DAILY, WEEKLY, MONTHLY
  recurringDays   String[] // Days of week for recurring
  recurringUntil  DateTime?
  
  // Preferences
  passengers      Int      @default(1)
  notes           String?
  preferredDriverId String?
  maxFare         Float?
  
  // Status
  status          String   @default("ACTIVE") // ACTIVE, PAUSED, CANCELLED
  nextRideAt      DateTime?
  lastRideAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customer User @relation(fields: [customerId], references: [id])
  
  @@index([customerId, scheduledFor])
  @@index([status, nextRideAt])
}

model DriverPreference {
  id          String   @id @default(cuid())
  driverId    String
  
  // Service preferences
  maxDistance Float?   // Maximum pickup distance
  rideTypes   String[] // Preferred ride types
  
  // Working preferences
  workingHours Json?   // Preferred working hours
  breakTimes   Json?   // Preferred break times
  workingDays  String[] // Preferred working days
  
  // Customer preferences
  minRating    Float?
  allowPets    Boolean  @default(false)
  allowSmoking Boolean  @default(false)
  allowFood    Boolean  @default(true)
  
  // Notification preferences
  soundEnabled Boolean  @default(true)
  vibrationEnabled Boolean @default(true)
  autoAcceptEnabled Boolean @default(false)
  autoAcceptDistance Float?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@unique([driverId])
}

model RideStatistics {
  id                String   @id @default(cuid())
  date              DateTime @db.Date
  totalRides        Int      @default(0)
  completedRides    Int      @default(0)
  cancelledRides    Int      @default(0)
  totalRevenue      Float    @default(0)
  totalDistance     Float    @default(0)
  averageRating     Float    @default(0)
  peakHourRides     Int      @default(0)
  surgeHourRides    Int      @default(0)
  
  // By ride type
  standardRides     Int      @default(0)
  premiumRides      Int      @default(0)
  sharedRides       Int      @default(0)
  
  // Performance metrics
  averageWaitTime   Float    @default(0)
  averageRideTime   Float    @default(0)
  driverUtilization Float    @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([date])
  @@index([date])
}
